# This workflow to test EKS connections and deploy service in kubernetes cluster.

name: pushnotification-service CI with Java Spring Boot repo, maven build tool, packaging & pushing as image to ECR, deploying imae in kube

# Events
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [ opened, edited, reopened, closed ]

env:
  ENVIRONMENT: qa
  CONSUL_HOST: consul-server.default.svc.cluster.local
  CONSUL_PORT: 8500
  APM_URL: skywalking-oap.default.svc.cluster.local:11800
  SERVICE_CODE: pushnotification-service
  SWAGGER: http://dev-ingress-gateway.gaiansolutions.com/
  ARTIFACT_RETENTION_DAYS: 10
  NEXUS_REPO_URL: http://dev.nexus-lib.gaiansolutions.com:8081/repository/releases
  NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  BASE_URL: http://dev-ingress-gateway.gaiansolutions.com
  CODE_PATH: /home/runner/work/twitter-service/pushnotification-service

  #For BVT
  API_ENV: API_K8S

# Workflow defination
jobs:
  ########## job to build the package and deploy to sonar for code analysis
  Build:
#     if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'edited'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow the checkout
        run: |
          git fetch --prune --unshallow --tags
          git tag --list

      - name: Generate Version
        id: version
        uses: sceccotti89/Github-Action-Versioning@v1.0.5

      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
          # distribution: 'zulu'

      # Step that does that actual cache save and restore
      - name: caching dependancies for subsequent runs
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Setup Gaian Nexus Repo credentials
        uses: s4u/maven-settings-action@v2.4.0
        with:
          servers: |
            [{
              "id": "nexus",
              "username": "${{ secrets.NEXUS_USERNAME }}",
              "password": "${{ secrets.NEXUS_PASSWORD }}"
            }]
          mirrors: |
            [{
              "id": "nexus",
              "name": "nexus",
              "mirrorOf": "nexus",
              "url": "${{ env.NEXUS_REPO_URL }}",
              "blocked": false
            }]

      - name: Run Unit Tests, publish coverage to Sonar
        run: mvn clean install -DskipTests
#        run: mvn clean install sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${{env.SERVICE_CODE}}-qa -Dsonar.host.url=${{ secrets.SONAR_HOST }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dproject.version=${{ steps.version.outputs.version }}

  Build_Deploy:
#     if: github.ref == 'refs/heads/qa'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow the checkout
        run: |
          git fetch --prune --unshallow --tags
          git tag --list

      - name: Generate Version
        id: version
        uses: sceccotti89/Github-Action-Versioning@v1.0.5

      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
          # distribution: 'zulu'

      # Step that does that actual cache save and restore
      - name: caching dependancies for subsequent runs
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Setup Gaian Nexus Repo credentials
        uses: s4u/maven-settings-action@v2.4.0
        with:
          servers: |
            [{
              "id": "nexus",
              "username": "${{ secrets.NEXUS_USERNAME }}",
              "password": "${{ secrets.NEXUS_PASSWORD }}"
            }]
          mirrors: |
            [{
              "id": "nexus",
              "name": "nexus",
              "mirrorOf": "nexus",
              "url": "${{ env.NEXUS_REPO_URL }}",
              "blocked": false
            }]

      - name: Run Unit Tests, publish coverage to Sonar
        run: mvn clean install -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.EKS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.EKS_KUBE_CONFIG }}

      - name: Docker Build, tag, push image to Amazon ECR, and deploy in EKS using kubernetes
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{env.SERVICE_CODE}}-${{ github.sha }}
          C_HOST: ${{ env.CONSUL_HOST }}
          C_PORT: ${{ env.CONSUL_PORT }}
          APM_URL: ${{ env.APM_URL }}
        run: |
          # Build a docker container and
          # steps.version.outputs.version
          # push it to ECR so that it can
          # be deployed to ECS/EKS
          sed -i'' -e "s/\$consul_url/$C_HOST/g" -e "s/\$consul_port/$C_PORT/g" -e "s/ENVIRONMENT/$ECR_REPOSITORY/g" -e "s/\$apm_url/$APM_URL/g" docker/startup.sh
          cat docker/startup.sh | grep consul
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ##### replacing image tag and registry inside deployment file
          sed -i'' -e "s/REG/$ECR_REGISTRY/g" -e "s/IMAGE/$ECR_REPOSITORY/g" -e "s/TAG/$IMAGE_TAG/g" kubernetes-files/deployment.yaml
          kubectl apply -f kubernetes-files/deployment.yaml
          kubectl apply -f kubernetes-files/istio-rules.yaml

      - name: Check pods after apply
        run: kubectl get pods

      - name: wait for swagger to up
        uses: mydea/action-wait-for-api@v1
        with:
          url: "${{env.BASE_URL}}/${{env.SERVICE_CODE}}/swagger-ui.html"
          method: GET
          timeout: 120
